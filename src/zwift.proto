// This is a fork of the wonderful work at https://github.com/zoffline/zwift-offline
syntax = "proto3";

enum NotableMomentTypeZG {
    NMT_NEW_PR = 0;
    NMT_GAINED_LEVEL = 5;
    NMT_TRAINING_PLAN_COMPLETE = 19;
    NMT_UNLOCKED_ITEM = 4;
    NMT_ACHIEVEMENT_UNLOCKED = 2;
    NMT_MISSION_COMPLETED = 3;
    NMT_COMPLETED_GOAL = 10;
    NMT_MET_DAILY_TARGET = 1;
    NMT_TOOK_ARCH_JERSEY = 8;
    NMT_FINISHED_CHALLENGE = 17;
    NMT_FINISHED_EVENT = 13;
    NMT_FINISHED_WORKOUT = 15;
    NMT_ACTIVITY_BESTS = 20;
    NMT_RIDEON = 18;
    NMT_RIDEON_INT = 22; //international
    NMT_QUIT_EVENT = 12;
    NMT_USED_POWERUP = 6;
    NMT_PASSED_TIMING_ARCH = 7;
    NMT_CREATED_GOAL = 9;
    NMT_JOINED_EVENT = 11;
    NMT_STARTED_WORKOUT = 14;
    NMT_STARTED_MISSION = 16;
    NMT_HOLIDAY_EVENT_COMPLETE = 21;
}

message NotableMoment { //.2,.3,.4 meanings inside last_activity.bin - not type, priority, incidentTime (i.e. 1595, 8, 9)
    optional uint64 activity_id = 1;
    optional NotableMomentTypeZG type = 2;
    optional uint32 priority = 3;
    optional uint64 incidentTime = 4;
    optional string aux1 = 5; // examples: {"achievementId":35,"name":"PAIRED","description":"Paired a phone through Zwift Companion"}
                              //           {"segmentName":"Marina Sprint","jerseyHash":"0x997d9df7","durationInMS":30524} (from last_activity.bin)
    optional string aux2 = 6; // empty string
    optional string largeImageUrl = 7;
}

message SocialInteraction {
    optional uint64 athleteId = 1;
    optional uint32 timeDuration = 2;
    optional float proximityTimeScore = 3;
    optional string si_f4 = 4;
}

message ClubAttribution {
    optional string name = 1;
    optional float value = 2;
}

enum ProfileFollowStatus {
    PFS_UNKNOWN = 1;
    PFS_REQUESTS_TO_FOLLOW = 2;
    PFS_IS_FOLLOWING = 3;
    PFS_IS_BLOCKED = 4;
    PFS_NO_RELATIONSHIP = 5;
    PFS_SELF = 6;
    PFS_HAS_BEEN_DECLINED = 7;
}

enum FitnessPrivacy {
    UNSET = 0;
    HIDE_SENSITIVE_DATA = 1;
    SAME_AS_ACTIVITY = 2;
}

message ActivityFull {  //where is primaryImageUrl, feedImageThumbnailUrl, activityRideOnCount, activityCommentCount, eventId, rideOnGiven
    optional uint64 id = 1;
    required uint64 athleteId = 2;
    required uint64 course_id = 3;
    required string name = 4;
    optional string _f5 = 5;
    optional bool privateActivity = 6;
    required string start_date = 7;
    optional string end_date = 8;
    optional float distanceInMeters = 9;
    optional float avg_heart_rate = 10;
    optional float max_heart_rate = 11;
    optional float avg_watts = 12;
    optional float max_watts = 13;
    optional float avg_cadence = 14;
    optional float max_cadence = 15;
    optional float avg_speed = 16; // in m/s
    optional float max_speed = 17; // in m/s
    optional float calories = 18;
    optional float total_elevation = 19;
    optional uint32 strava_upload_id = 20; //uint64 stored as int32
    optional uint32 strava_activity_id = 21; //uint64 stored as int32
    optional string _f22 = 22;
    optional uint32 _f23 = 23; //empty; stored as int32; enum up to 5 - ProfileFollowStatus?
    optional bytes fit = 24;
    optional string fit_filename = 25;
    optional uint64 subgroupId = 26;
    optional uint64 workoutHash = 27;
    optional float progressPercentage = 28;
    optional Sport sport = 29;
    repeated string act_f30 = 30;
    optional string date = 31;
    optional float act_f32 = 32;
    optional string act_f33 = 33;
    optional string act_f34 = 34;
    repeated NotableMoment notables = 35;
    repeated SocialInteraction socials = 36;
    optional ActivityPrivacyType privacy = 37;
    optional FitnessPrivacy fitness_privacy = 38;
    optional string club_name = 39;
    optional int64 movingTimeInMs = 40;
    repeated ClubAttribution cas = 41;
}

message Activity { //field names pinned to db 
    optional uint64 id = 1;
    required uint64 athleteId = 2;
    required uint64 _f3 = 3; //-> rename to course_id
    required string name = 4;
    optional string _f5 = 5;
    optional bool _f6 = 6;
    required string start_date = 7;
    optional string end_date = 8;
    optional float distance = 9; // in meters
    optional float avg_heart_rate = 10;
    optional float max_heart_rate = 11;
    optional float avg_watts = 12;
    optional float max_watts = 13;
    optional float avg_cadence = 14;
    optional float max_cadence = 15;
    optional float avg_speed = 16; // in m/s
    optional float max_speed = 17; // in m/s
    optional float calories = 18;
    optional float total_elevation = 19;
    optional uint32 strava_upload_id = 20; //uint64 stored as int32
    optional uint32 strava_activity_id = 21; //uint64 stored as int32
    //optional string _f22 = 22;
    optional uint32 _f23 = 23; //empty; stored as int32; enum up to 5 - ProfileFollowStatus?
    optional bytes fit = 24;
    optional string fit_filename = 25;
    //optional uint64 subgroupId = 26;
    //optional uint64 workoutHash = 27;
    //optional float progressPercentage = 28;
    optional int64 _f29 = 29; //-> Sport sport
    //repeated string act_f30 = 30;
    optional string date = 31;
    /*optional float act_f32 = 32;
    optional string act_f33 = 33;
    optional string act_f34 = 34;
    repeated NotableMoment notables = 35;
    repeated SocialInteraction socials = 36;
    optional ActivityPrivacyType privacy = 37;
    optional FitnessPrivacy fitness_privacy = 38;
    optional string club_name = 39;
    optional int64 moving_time_ms = 40;
    repeated ClubAttribution cas = 41;*/
}

message ActivityList {
    repeated Activity activities = 1;
}

message ActivityListFull {
    repeated ActivityFull activities = 1;
}

enum ActivityPrivacyType {
    PUBLIC = 0;
    PRIVATE = 1;
    FRIENDS = 2;
}

enum Sport {
    CYCLING = 0;
    RUNNING = 1;
    ROWING = 2;
    SPORT3 = 3;
    SPORT4 = 4;
}

enum PlayerType {
    PLAYERTYPE0 = 0;
    NORMAL = 1;
    PRO_CYCLIST = 2;
    ZWIFT_STAFF = 3;
    AMBASSADOR = 4;
    VERIFIED = 5;
    ZED = 6;
    ZAC = 7;
    PRO_TRIATHLETE = 8;
    PRO_RUNNER = 9;
}

enum PowerType {
    PT_VIRTUAL = 0;
    PT_METER = 1;
}

message PlayerProfile {
    optional int64 id = 1;
    optional int64 server_realm = 2;
    optional string email = 3;
    optional string firstName = 4;
    optional string lastName = 5;
    optional bool male = 6;
    optional string _f7 = 7;
    optional uint32 weight = 9;
    optional uint32 ftp = 10;
    optional uint32 _f11 = 11;
    optional uint32 bodyType = 12;
    optional uint32 hair_type = 13;
    optional uint32 facial_hair_type = 14;
    optional uint32 ride_helmet_type = 15;
    optional uint32 glasses_type = 16;
    optional uint32 ride_shoes_type = 17;
    optional uint32 ride_socks_type = 18;
    optional uint32 ride_gloves = 19;
    optional fixed32 ride_jersey = 20;
    optional fixed32 _f21 = 21;
    optional fixed32 bike_wheel_front = 22;
    optional fixed32 bike_wheel_rear = 23;
    optional fixed32 bike_frame = 24;
    optional fixed32 _f25 = 25;
    optional fixed32 _f26 = 26;
    optional fixed64 bike_frame_colour = 27;
    optional fixed64 _f28 = 28;
    optional fixed64 _f29 = 29;
    optional fixed64 _f30 = 30;
    optional fixed64 _f31 = 31;
    optional fixed64 _f32 = 32;
    optional bytes saved_game = 33;
    optional uint32 countryCode = 34;
    optional uint32 totalDistance = 35;
    optional uint32 totalDistanceClimbed = 36;
    optional uint32 totalTimeInMinutes = 37;
    optional uint32 totalInKomJersey = 38;
    optional uint32 totalInSprintersJersey = 39;
    optional uint32 totalInOrangeJersey = 40;
    optional uint32 totalWattHours = 41;
    optional uint32 height = 42;
    optional string dob = 43;
    optional uint32 max_heart_rate = 44;
    optional bool connectedToStrava = 45;
    optional uint32 totalExperiencePoints = 46;
    optional uint32 totalGold = 47;    
    optional PlayerType playerTypeId = 48;    
    optional uint32 achievementLevel = 49;
    optional bool useMetric = 50;
    optional bool stravaPremium = 51;
    optional PowerType power_source_model = 52;
    optional uint32 _f53 = 53;
    optional uint32 _f54 = 54;
    optional uint32 age = 55;
    optional fixed32 _f56 = 56;
    optional uint32 _f57 = 57;
    optional string imageSrcLarge = 58;
    optional fixed64 privacy_bits = 59;
    repeated ProfileEntitlement entitlements = 60;
    
    optional SocialFacts social_facts = 61;
    message SocialFacts {
        optional int64 profile_id = 1;
        optional int32 followers_count = 2;
        optional int32 followees_count = 3;
        optional int32 followees_in_common_with_logged_in_player = 4;
        optional FollowStatus follower_status_of_logged_in_player = 5;
        optional FollowStatus followee_status_of_logged_in_player = 6;
        optional bool is_favorite_of_logged_in_player = 7;
    }
    
    optional FollowStatus follow_status = 62;
    optional bool connected_to_training_peaks = 63;
    optional bool connected_to_todays_plan = 64;
    
    optional EnrolledProgram enrolled_program = 65;
    enum EnrolledProgram {
        ENROLLEDPROGRAM0 = 0;
        ZWIFT_ACADEMY = 1;
        ENROLLEDPROGRAM2 = 2;
        ENROLLEDPROGRAM3 = 3;
        ENROLLEDPROGRAM4 = 4;
    }
    
    optional string todayplan_url = 66;
    optional uint32 _f67 = 67;
    optional fixed32 run_shirt_type = 68;
    optional fixed32 run_shorts_type = 69;
    optional fixed32 run_shoes_type = 70;
    optional fixed32 run_socks_type = 71;
    optional fixed32 run_helmet_type = 72;
    optional fixed32 run_arm_accessory = 73;
    optional uint32 totalRunDistance = 74;
    optional uint32 totalRunExperiencePoints = 75;
    optional fixed32 _f76 = 76;
    optional fixed32 _f77 = 77;
    optional fixed32 _f78 = 78;
    optional fixed32 _f79 = 79;
    optional uint32 _f80 = 80;
    optional uint32 _f81 = 81;
    optional Subscription subscription = 82;
    optional string mix_panel_distinct_id = 83;
    optional uint32 runAchievementLevel = 84;
    optional uint32 totalRunTimeInMinutes = 85;
    optional Sport sport = 86;
    optional uint32 utc_offset_in_minutes = 87;
    optional bool connected_to_under_armour = 88;
    optional string preferredLanguage = 89;
    optional uint32 hair_colour = 90;
    optional uint32 facial_hair_colour = 91;
    optional uint32 _f92 = 92;
    optional uint32 _f93 = 93;
    optional uint32 run_shorts_length = 94;
    optional uint32 _f95 = 95;
    optional uint32 run_socks_length = 96;
    optional uint32 _f97 = 97;
    optional uint32 ride_socks_length = 98;
    optional uint32 _f99 = 99;
    optional uint32 _f100 = 100;
    optional uint32 _f101 = 101;
    optional uint32 _f102 = 102;
    optional uint32 _f103 = 103;
    optional uint32 _f104 = 104;
    optional bool connected_to_withings = 105;
    optional bool connected_to_fitbit = 106;
    optional string launchedGameClient = 108;
    optional int64 current_activity_id = 109;
    optional bool connected_to_garmin = 110;
    message Reminder {
        optional int64 _f1 = 1;
        optional string _f2 = 2;
        optional int64 _f3 = 3;
        message ReminderProperty {
            optional int64 _f1 = 1;
            optional string _f2 = 2;
            optional string _f3 = 3;
        }
        repeated ReminderProperty _f4 = 4;
    }
    repeated Reminder reminders = 111;
    optional bool _f112 = 112;
    repeated Attribute private_attributes = 113;
    repeated Attribute public_attributes = 114;
    optional int32 totalRunCalories = 115;
    optional int64 _f116 = 116;
    optional int32 runTime1miInSeconds = 117;
    optional int32 runTime5kmInSeconds = 118;
    optional int32 runTime10kmInSeconds = 119;
    optional int32 runTimeHalfMarathonKnSeconds = 120;
    optional int32 runTimeFullMarathonInSeconds = 121;
    optional int32 _f122 = 122;
    enum CyclingOrganization {
        NO_CYCLING_LICENSE = 0;
        CYCLING_SOUTH_AFRICA = 1;
        CYCLING_AUSTRALIA = 2;
        CYCLING_NEW_ZEALAND = 3;
    }
    optional CyclingOrganization cyclingOrganization = 123;
    optional string _f124 = 124;
    optional ActivityPrivacyType default_activity_privacy = 125;
    optional bool connected_to_runtastic = 126;
    repeated PropertyChange property_changes = 127;
}

message PlayerProfiles {
     repeated PlayerProfile profiles = 1;
}

message ProfileEntitlement {
    optional EntitlementType type = 1;

    enum EntitlementType {
        ENTITLEMENTTYPE0 = 0;
        RIDE = 1;
        RUN = 2;
        ROW = 3;
        USE = 4;
    }

    optional int64 _f2 = 2; // always -1 when "RIDE"; increasing small value when "USE" (437, 438, 911, ..., 1229)
    optional ProfileEntitlementStatus status = 3;

    enum ProfileEntitlementStatus {
        ENTITLEMENTSTATUS0 = 0;
        EXPIRED = 1;
        ACTIVE = 2;
        CANCELED = 3;
        INACTIVE = 4;
        APPLIED_AS_SUBSCRIPTION_TRIAL_PERIOD = 5;
    }

    optional string period = 4; // 'P7D' = period of 7 days (Y, M also supported for year and month)
    optional uint32 begin_time_unix = 5; //when period started
    optional uint32 end_time_unix = 6;   //when period ended
    optional uint32 kilometers = 7;      //25 every month
    optional uint32 begin_total_distance = 8; //where every-month gift started
    optional uint32 end_total_distance = 9;   //where every-month gift should end
    optional string source = 10; // for example, "strava.premium" ?
    optional Platform platform = 11; // legacy?

    enum Platform {
        PLATFORM_OSX = 0;
        PLATFORM_PC = 1;
        PLATFORM_IOS = 2;
        PLATFORM_ANDROID = 3;
        PLATFORM_TVOS = 4;
        PLATFORM5 = 5;
        PLATFORM6 = 6;
    }

    optional uint32 renewal_date_unix = 12; //when next 25km gift renewed
    optional bool new_trial_system = 13; //do not interrupt current track if trial ended
    repeated Platform platforms = 14;
}

enum FollowStatus {
    FOLLOWSTATUS0 = 0;
    UNKNOWN = 1;
    REQUESTS_TO_FOLLOW = 2;
    IS_FOLLOWING = 3;
    HAS_BEEN_DECLINED = 7;
    IS_BLOCKED = 4;
    NO_RELATIONSHIP = 5;
    SELF = 6;
}

message Subscription {
    optional Gateway gateway = 1;

    enum Gateway {
        BRAINTREE = 0;
        APPLE = 1;
    }
    
    optional SubscriptionStatus status = 2;

    enum SubscriptionStatus {
        NEW = 0;
        EXPIRED = 1;
        ACTIVE = 2;
        CANCELED = 3;
        PAST_DUE = 4;
        PENDING = 5;
        SUBERROR = 6;
        UNRECOGNIZED = 7;
        UNKNOWN = 8;
        ACTIVE_WITH_PAYMENT_FAILURE = 9;
        ABANDONED = 10;
    }
}

message PropertyChange {

    enum Id {
        TYPE0 = 0;
        DATE_OF_BIRTH = 1;
        GENDER = 2;
    }

    required Id property_name = 1;
    optional int32 change_count = 2;
    optional int32 max_changes = 3;
}

/*
 *   Attribute ID is crc32 of it's string_value.
 *       e.g. -1575272099="TODAYS_SPORT_SELECT_TYPE"
*/
message Attribute {
    required int32 id = 1;
    optional int64 number_value = 2;
    optional float float_value = 3;
    optional string string_value = 5;
}

message AchievementEntry {
    required int32 id = 1;
}

message Achievements {
    repeated AchievementEntry achievements = 1;
}

message DropInWorld {
    required uint64 id = 1;
    optional string name = 2;
    optional uint64 course_id = 3;
    optional bool _f4 = 4;
    optional uint64 zwifters = 5;
    optional uint64 world_time = 6;
    optional uint64 real_time = 7;
    repeated DropInPlayer pro_players = 8;
    repeated DropInPlayer followees = 9;
    repeated DropInPlayer others = 10;
    optional uint64 max_zwifters = 11; //stored as int32
    repeated DropInPlayer pacer_bots = 12;
}

message DropInWorldList {
    repeated DropInWorld worlds = 1;
}

message DropInPlayer {
    required uint64 id = 1;
    required string firstName = 2;
    required string lastName = 3;
    optional uint64 distance = 4;
    optional uint64 time = 5;
    optional uint64 country_code = 6;
    optional PlayerType player_type = 7;
    optional Sport sport = 8;
    optional bool _f9 = 9; 
    optional bool _f10 = 10;
    optional uint64 _f11 = 11;
    optional uint64 power = 12;
    optional uint64 _f13 = 13;
    optional float x = 14;
    optional float y_altitude = 15;
    optional float z = 16;
    optional int32 route = 17;
    optional uint32 ride_power = 18;
    optional uint32 speed = 19;
}

message Goal {
    optional uint64 id = 1;
    optional uint64 athleteId = 2;
    optional int64 _f3 = 3;    //-> enum Sport sport
    optional string name = 4; // i.e. "Monthly time goal"
    optional int64 type = 5;  //-> enum GoalType 0=distance, 1=time
    optional int64 periodicity = 6; //-> enum GoalPeriod 0=weekly, 1=monthly
    optional float target_distance = 7;  //in meters. set to dur for dur goals
    optional float target_duration = 8;  //in minutes. set to dist for dist goals
    optional float actual_distance = 9;  //in meters. is also set for dur goals?
    optional float actual_duration = 10; //in minutes. is also set for dist goals?
    optional uint64 created_on = 11;     //in ms since epoch
    optional uint64 period_end_date = 12;
    optional uint64 _f13 = 13;   //-> enum GoalStatus 0=active, 1=retired
    //optional string _f14 = 14; // timezone? (empty)
}

message Goals {
    repeated Goal goals = 1;
}

message HashSeed {
    required uint32 seed1 = 1;
    required uint32 seed2 = 2;
    required uint64 expiryDate = 3;
}

message HashSeeds {
    repeated HashSeed seeds = 1;
}

message LoginResponse {
    required string session_state = 1;
    required PerSessionInfo info = 2;
}

enum ZofflineConstants {
    RealmID = 1;   // hardcoded in ZwiftApp=1 (g_CurrentServerRealmID, 0: never connected; -1: disconnected)
}

enum UserBikeAction {
    UBA_ELBOW = 0;
    UBA_WAVE = 1;
    UBA_02 = 2; //BikeEntity::UpdateAnimation
    UBA_RIDEON = 3;
    UBA_HAMMER = 4;
    UBA_NICE = 5;
    UBA_BRING_IT = 6;
    UBA_TOAST = 7;
    UBA_BELL = 8;
    UBA_HOLIDAY_WAVE = 9; //not sure
}

enum POWERUP_TYPE {
    LIGHTNESS      = 0;
    DRAFTBOOST     = 1;
    BONUS_XP_LIGHT = 2;
    BONUS_XP       = 3;
    UNDRAFTABLE    = 4;
    AERO           = 5;
    NINJA          = 6;
    STEAMROLLER    = 7;
    ANVIL          = 8;
    POWERUP_CNT    = 9;
    POWERUP_NONE   = 15;
}

enum ExpungeReason {
    NOT_EXPUNGED = 0;
    WORLD_FULL = 1;
    ROADS_CLOSED = 2;
}

enum SocialPlayerActionType {
    SOCIAL_ACTION_UNKNOWN_TYPE = 0;
    SOCIAL_TEXT_MESSAGE = 1;
    SOCIAL_RIDE_ON = 2;
    SOCIAL_FLAG = 3;
}

enum FlagType {
    FLAG_TYPE_UNKNOWN = 0;
    FLAG_TYPE_HARASSMENT = 1;
    FLAG_TYPE_FLIER = 2;
    FLAG_TYPE_BAD_LANGUAGE = 3;
}

enum MessageGroupType {
    MGT_UNKNOWN = 0;
    MGT_GLOBAL = 1;
    MGT_DIRECT = 2;
    MGT_EVENT = 3;
    MGT_CLUB = 4;
}

message SocialPlayerAction {
    optional uint64 athleteId = 1;
    optional uint64 toAthleteId = 2; // 0 if public message
    optional SocialPlayerActionType spa_type = 3;
    optional string firstName = 4;
    optional string lastName = 5;
    optional string message = 6;
    optional string avatar = 7;
    optional int32 countryCode = 8;
    optional FlagType flagType = 9;
    optional MessageGroupType msgType = 10;
    optional int64 eventSubgroup = 11;
}

message CompanionToGameCommand {
    required int32 seqno = 1;
    required uint32 command = 2; // 1 looks like camera change
    optional int64 subject = 3;
    optional string _f4 = 4;
    optional int64 _f5 = 5;
    optional string _f6 = 6;
    optional int64 _f7 = 7;
    optional int32 _f8 = 8;
    optional uint32 _f9 = 9;
    required uint32 subCommand = 10;
    optional SocialPlayerAction socialAction = 11;
    // no 12
    //optional MobileAlertResponse _f13 = 13;
    // no 14-17
    //optional BLEPeripheralResponse _f18 = 18;
    optional uint64 athleteId = 19;
    optional string _f20 = 20;
    optional bytes _f21 = 21;
    //optional BLEAdvertisement _f22 = 22;
}

message CompanionToGame {
    required uint64 athleteId = 1;
    repeated CompanionToGameCommand commands = 2;
    optional float _a3 = 3; // 0 zero not moving, look to see if delta coords
    optional float _a4 = 4; // 0
    optional float _a5 = 5; // 0
    optional float _b6 = 6; // maybe coords: -0.0314304381608963
    optional float _b7 = 7; // maybe coords: -0.06250044703483582
    optional float _b8 = 8; // maybe coords: -2.5603649616241455
    optional double ts = 9;
    optional int32 seqno = 10;
}

message PlayerInfo {
    int32 id = 1;
    int32 f2 = 2;
    int64 position = 3;
    string profile = 5;
    int32 id2 = 6;
    int32 f7 = 7;
    string name = 11;
    int32 countryCode = 12;
    fixed32 worldTime = 13;
    int32 f16 = 16;
}

message GTPC21_6_1 {
    int32 seqno = 1;
    repeated PlayerInfo playerInfos = 2;
    int32 f3 = 3;
}

message GTPC21_6 {
    repeated GTPC21_6_1 gtpc21_6_1 = 1;
}

message GTPC21_4 {
    int32 f1 = 1;
    string f6 = 6;
    int32 f7 = 7;
    int32 f8 = 8;
}

message GTPC21_8 {
    int32 f1 = 1;
    int32 f2 = 2;
}

message GTPC21 {
    int32 f1 = 1; // saw a 6 following a cam change once.
    GTPC21_4 gtpc21_4 = 4;
    GTPC21_6 gtpc21_6 = 6;
    string _f7 = 7;
    GTPC21_8 gtpc21_8 = 8;
}

message GameToCompanionCommand {
    int32 seqno = 1;
    int32 f2 = 2; // 13 following cam change once
    int32 f3 = 3;
    int32 f4 = 4;
    int32 f5 = 5;
    int32 f6 = 6;
    GTPC21 gtpc21 = 21;
}

message GameToCompanion {
    int32 seqno = 1;
    int32 replySeqno = 2;
    uint64 athleteId = 3;
    int32 _f4 = 4; // possibly bool
    int64 _f5 = 5;
    uint32 _f6 = 6; // possibly bool
    int64 _f7 = 7;
    int64 _f8 = 8;
    int64 _f9 = 9;
    int64 _f10 = 10;
    repeated GameToCompanionCommand commands = 11;
    int64 _f12 = 12;  // Possibly world time? u-240543788796 s-120271894398
}

message PartnersUrls {
    optional string todaysplan_url = 1;
    optional string trainingpeaks_url = 2;
}

message PerSessionInfo {
    required string relay_url = 1;
    optional PartnersUrls apis = 2;
    optional uint64 time = 3;
    optional TcpConfig nodes = 4;
    optional int32 maxSegmSubscrs = 5; //if received, sub_718DE99570 puts log message "Received max allowed segment subscriptions from session: %d", m_maxSegmSubscrs and stores it into GlobalState...
}

message InvitedProfileProto {
    required uint64 athleteId = 1;
    optional string firstName = 2;
    optional string lastName = 3;
    optional string imageSrc = 4;
    optional bool enrolledZwiftAcademy = 5;
    optional bool male = 6;
    optional PlayerType player_type = 7;
}

enum EventInviteStatus {
    PENDING = 0;
    ACCEPTED = 1;
    REJECTED = 2;
}

message EventInviteProto {
    optional InvitedProfileProto profile = 1;
    required EventInviteStatus status = 2;
}

message PrivateEventFeedProto {
    required uint64 event_id = 1; //read in PrivateEventsManagerV2::RegisterPrivateEvent
    optional Sport sport = 2;
    optional uint64 eventSubgroupStart = 3; //IsPrivateEventExpired: return ZNETWORK_GetNetworkSyncedTimeGMT() > a1->m_eventSubgroupStart / 1000uLL + 1800
    optional uint64 route_id = 4;
    optional uint32 durationInSeconds = 5;
    optional float distanceInMeters = 6;
    optional uint64 answeredCount = 7; //stored as int32
    optional uint32 invitedTotalCount = 8;
    optional uint32 acceptedFolloweeCount = 9;
    optional uint32 acceptedTotalCount = 10;
    optional string organizerImageUrl = 11;
    optional uint64 organizerProfileId = 12;
    optional string organizerFirstName = 13;
    optional string organizerLastName = 14;
    optional uint64 updateDate = 15;
    optional uint64 subgroupId = 16;
    optional uint32 laps = 17;
    optional bool rubberbanding = 18; //keep together "rulesId": "1024" 
}

message PrivateEventFeedListProto {
    repeated PrivateEventFeedProto pef = 1;
}

message PlayerJoinedEvent {
    required uint64 rel_id = 1; //subgroup id
    optional uint64 athleteId = 2;
    optional uint64 pje_f3 = 3;
}

message PlayerLeftEvent {
    required uint64 rel_id = 1; //event id
    optional uint64 athleteId = 2;
    optional uint64 ple_f3 = 3;
}

message EventSubgroupProtobuf { //where is fieldLimit, signedUp, signupStatus, registered, registrationStatus, followeeEntrantCount
//totalEntrantCount, followeeSignedUpCount, totalSignedUpCount, followeeJoinedCount, totalJoinedCount, rulesSet, workoutHash, overrideMapPreferences
//qualificationRuleIds, accessValidationResult
    required uint64 id = 1; // 2395269
    optional string name = 2; // ex: "3R True2 Steady Ride [2.0w/kg avg] (C)"
    optional string description = 3; // ex: "Welcome to our sociable early morning/evening social group ride."
    optional uint32 evs_f4 = 4; // ""
    optional uint32 evs_f5 = 5; // 154 and others
    optional uint32 evs_f6 = 6; // 0
    optional string scode = 7; // ex: "PT3600S"
    optional uint64 rules_id = 8; // 320 and others
    optional uint64 registrationStart = 9;
    optional uint64 registrationStartWT = 10;
    optional uint64 registrationEnd = 11;
    optional uint64 registrationEndWT = 12;
    optional uint64 lineUpStart = 13;
    optional uint64 lineUpStartWT = 14;
    optional uint64 lineUpEnd = 15;
    optional uint64 lineUpEndWT = 16;
    optional uint64 eventSubgroupStart = 17;
    optional uint64 eventSubgroupStartWT = 18;
    optional uint64 evs_f19 = 19;
    optional uint64 evs_f20 = 20; //tag416
    optional bool evs_f21 = 21; // false, tag424
    required uint64 route_id = 22; // 3366225080
    repeated uint64 invitedLeaders = 23; // tag440
    optional float distanceInMeters = 24; // tag453
    optional uint32 laps = 25; // tag456
    // no 26-28
    optional uint64 startLocation = 29; // 13, tag488 [>=6 -> 'bad start location'] valid values: 1..5 (0->1)
    optional uint32 label = 30; // A:1, B:2, C:3, D:4, E:5 etc, tag496
    optional uint32 paceType = 31; // 1 almost everywhere, 2 sometimes; tag504
    optional float fromPaceValue = 32; // tag645
    optional float toPaceValue = 33; // tag653
    optional uint32 durationInSeconds = 34; // Duration of event in seconds, tag656
    optional uint32 evs_f35 = 35; // tag664
    optional uint64 jerseyHash = 36; // 493134166, tag672
    optional bool evs_f37 = 37; // 0, tag680
    optional uint32 evs_f38 = 38; // tag688
    optional string auxiliaryUrl = 39; // "https://cdn.zwift.com/AudioBroadcasts/wbrgrouprideaudiov4", tag698
    optional uint64 bikeHash = 40; // 4208139356, tag704
    repeated uint64 invitedSweepers = 41; // tag712
    optional uint64 evs_f42 = 42; // tag720
    optional string customUrl = 43; // https://cdn.zwift.com/events/upload/workouts/CafeRide1.zwo, tag730
    optional bool evs_f44 = 44; // false, tag736
    optional string tags = 45; // tag746, semi-colon delimited tags eg: "fenced;3r;created_ryan;communityevent;no_kick_mode;timestamp=1603911177622"
    optional uint32 lateJoinInMinutes = 46; //tag752
    optional uint64 course_id = 47; // tag760
    optional uint64 evs_f48 = 48; //tag898
    optional string routeUrl = 49; //tag906
    repeated int32 evs_f50 = 50; //tag912
    optional bool evs_f51 = 51; //tag920
}

enum EventVisibility {
    EV_NULL = 0;
    EV_PUB_SHARE = 1;   // event public shareable
    EV_BY_RESOURCE = 2; // event defined by resource
    EV_SHAREABLE = 3;
}

message MicroserviceEventData {
    optional string name = 1;                // "clubs" everywhere (json: microserviceName)
    optional bytes externalResourceId = 2;   // different 16-byte bb4538bfd13346c99a4df2b3cc3b5d95 (json: microserviceExternalResourceId)
    optional EventVisibility visibility = 3; // enum 1 (json: microserviceEventVisibility)
}

message EventSeriesProtobuf { //{"id":4531,"name":"Zwift Academy Triathlon - Baseline TT","description":null,"imported":false}
    optional uint64 id = 1;          //5445 or 1485
    optional string name = 2;        //INEOSVTC or "Fast Friday"
    optional string description = 3; //"" or "Congratulations, you crushed another week of workouts! ..."
}

message EventTimeTrialOptions { //{"timeGapBetweenRowsMs":15000,"maxRows":50,"maxRidersPerRow":10}
    optional uint32 timeGapBetweenRowsMs = 1;  //15000 everywhere
    optional uint32 maxRows = 2;               //50 or 25
    optional uint32 maxRidersPerRow = 3;       //10 everywhere
    optional uint32 evt_f4 = 4;
    optional uint64 evt_f5 = 5;
}

enum EventTypeV2 {
    EVENT_TYPE_UNKNOWN = 0;
    EVENT_TYPE_EFONDO = 1;
    EVENT_TYPE_RACE = 2;
    EVENT_TYPE_GROUP_RIDE = 3;
    EVENT_TYPE_GROUP_WORKOUT = 4;
    EVENT_TYPE_TIME_TRIAL = 5;
}

enum EventType {
    ET_UNKNOWN = 0;
    EFONDO = 1;
    RACE = 2;
    GROUP_RIDE = 3;
    GROUP_WORKOUT = 4;
    TIME_TRIAL = 5;
}

enum EventCulling {
    CULLING_UNDEFINED = 0;
    CULLING_EVERYBODY = 1;
    CULLING_EVENT_ONLY = 2;
    CULLING_SUBGROUP_ONLY = 3;
}

message Event { //real name: EventProtobuf; where is shortName, shortDescription, rulesSet, routeUrl, bikeHash, 
//privateEvent, followeeEntrantCount, totalEntrantCount, followeeSignedUpCount, totalSignedUpCount, followeeJoinedCount,
//totalJoinedCount, auxiliaryUrl, imageS3Name, imageS3Bucket, cullingType, recurring, recurringOffset, publishRecurring, parentId, type, workoutHash,
//customUrl, restricted, unlisted, eventSecret, accessExpression, qualificationRuleIds, minGameVersion, recordable, imported, eventTemplateId
    required uint64 id = 1;
    optional uint64 server_realm = 2;
    required string name = 3;
    optional string description = 4;
    optional uint64 eventStart = 5; // Start time (epoch time in ms)
    optional string e_f6 = 6;
    optional float distanceInMeters = 7;
    optional uint32 laps = 8;
    optional uint32 e_f9 = 9;
    repeated EventSubgroupProtobuf category = 10; //event_subgroup_size() <= MAX_SUBGROUPS(6)
    optional string e_f11 = 11;
    optional string imageUrl = 12;
    optional uint32 durationInSeconds = 13;
    optional uint64 route_id = 14;
    optional uint64 rules_id = 15;
    optional uint32 e_f16 = 16;
    optional bool visible = 17;
    optional uint64 jerseyHash = 18;
    optional string e_f19 = 19;
    optional string e_f20 = 20;
    optional string e_f21 = 21;
    optional Sport sport = 22;
    optional uint64 e_f23 = 23;
    optional EventType eventType = 24;
    optional uint64 e_f25 = 25;
    optional string e_f26 = 26;
    optional uint64 e_f27 = 27; //<=4, ENUM? saw = 2
    optional bool overrideMapPreferences = 28;
    optional bool invisibleToNonParticipants = 29;
    optional EventSeriesProtobuf evSeries = 30;
    optional string tags = 31; // semi-colon delimited tags
    optional uint64 e_f32 = 32;
    optional bool e_wtrl = 33; //WTRL (World Tactical Racing Leagues)
    optional uint32 lateJoinInMinutes = 34;
    optional uint64 course_id = 35;
    optional EventTimeTrialOptions tto = 36;
    optional string e_f37 = 37;
    optional string e_f38 = 38;
    optional uint32 e_f39 = 39;
    optional MicroserviceEventData msed = 40;
    repeated uint32 e_f41 = 41;
}

message Events { //real name: EventsProtobuf
    repeated Event events = 1;
}

message PrivateEventProto {
    required uint64 id = 1;
    optional Sport sport = 2;
    optional uint64 eventStart = 3;
    optional uint64 routeId = 4;
    optional uint64 startLocation = 5;
    optional uint32 durationInSeconds = 6;
    optional float distanceInMeters = 7;
    optional string description = 8;
    optional uint64 workoutHash = 9; //or laps
    optional uint64 organizerId = 10;
    repeated EventInviteProto eventInvites = 11;
    optional bool showResults = 12;
    optional uint32 laps = 13; //or workoutHash
    optional bool rubberbanding = 14;
}

message LateJoinInformation {
    optional uint64 road_id = 1;
    optional float road_time = 2;
    optional bool is_forward = 3;
    optional uint64 athleteId = 4; // leader of meetup or -1
    optional uint32 lj_f5 = 5; //64 on wire
    optional uint32 lj_f6 = 6; //64 on wire
    optional uint32 lj_f7 = 7; //64 on wire
}
