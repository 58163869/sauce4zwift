// This is a fork of the wonderful work at https://github.com/zoffline/zwift-offline
syntax = "proto3";
import "zwiftMessages.proto"; // PlayerState

enum NotableMomentTypeZG {
    NEW_PR = 0;
    GAINED_LEVEL = 5;
    TRAINING_PLAN_COMPLETE = 19;
    UNLOCKED_ITEM = 4;
    ACHIEVEMENT_UNLOCKED = 2;
    MISSION_COMPLETED = 3;
    COMPLETED_GOAL = 10;
    MET_DAILY_TARGET = 1;
    TOOK_ARCH_JERSEY = 8;
    FINISHED_CHALLENGE = 17;
    FINISHED_EVENT = 13;
    FINISHED_WORKOUT = 15;
    ACTIVITY_BESTS = 20;
    RIDEON = 18;
    RIDEON_INT = 22; //international
    QUIT_EVENT = 12;
    USED_POWERUP = 6;
    PASSED_TIMING_ARCH = 7;
    CREATED_GOAL = 9;
    JOINED_EVENT = 11;
    STARTED_WORKOUT = 14;
    STARTED_MISSION = 16;
    HOLIDAY_EVENT_COMPLETE = 21;
}

message NotableMoment { //.2,.3,.4 meanings inside last_activity.bin - not type, priority, incidentTime (i.e. 1595, 8, 9)
    optional uint64 activityId = 1;
    optional NotableMomentTypeZG type = 2;
    optional uint32 priority = 3;
    optional uint64 incidentTime = 4;
    optional string aux1 = 5; // examples: {"achievementId":35,"name":"PAIRED","description":"Paired a phone through Zwift Companion"}
                              //           {"segmentName":"Marina Sprint","jerseyHash":"0x997d9df7","durationInMS":30524} (from last_activity.bin)
    optional string aux2 = 6; // empty string
    optional string largeImageUrl = 7;
}

message SocialInteraction {
    optional uint64 athleteId = 1;
    optional uint32 timeDuration = 2;
    optional float proximityTimeScore = 3;
    optional string _f4 = 4;
}

message ClubAttribution {
    optional string name = 1;
    optional float value = 2;
}

enum ProfileFollowStatus {
    UNKNOWN = 1;
    REQUESTS_TO_FOLLOW = 2;
    IS_FOLLOWING = 3;
    IS_BLOCKED = 4;
    NO_RELATIONSHIP = 5;
    SELF = 6;
    HAS_BEEN_DECLINED = 7;
}

enum FitnessPrivacy {
    UNSET = 0;
    HIDE_SENSITIVE_DATA = 1;
    SAME_AS_ACTIVITY = 2;
}

message ActivityFull {  //where is primaryImageUrl, feedImageThumbnailUrl, activityRideOnCount, activityCommentCount, eventId, rideOnGiven
    optional uint64 id = 1;
    required uint64 athleteId = 2;
    required uint64 courseId = 3;
    required string name = 4;
    optional string _f5 = 5;
    optional bool privateActivity = 6;
    required string startDate = 7;
    optional string endDate = 8;
    optional float distanceInMeters = 9;
    optional float avgHeartRate = 10;
    optional float maxHeartRate = 11;
    optional float avgWatts = 12;
    optional float maxWatts = 13;
    optional float avgCadence = 14;
    optional float maxCadence = 15;
    optional float avgSpeed = 16; // in m/s
    optional float maxSpeed = 17; // in m/s
    optional float calories = 18;
    optional float totalElevation = 19;
    optional uint32 stravaUploadId = 20; //uint64 stored as int32
    optional uint32 stravaActivityId = 21; //uint64 stored as int32
    optional string _f22 = 22;
    optional uint32 _f23 = 23; //empty; stored as int32; enum up to 5 - ProfileFollowStatus?
    optional bytes fit = 24;
    optional string fitFilename = 25;
    optional uint64 subgroupId = 26;
    optional uint64 workoutHash = 27;
    optional float progressPercentage = 28;
    optional Sport sport = 29;
    repeated string _f30 = 30;
    optional string date = 31;
    optional float _f32 = 32;
    optional string _f33 = 33;
    optional string _f34 = 34;
    repeated NotableMoment notables = 35;
    repeated SocialInteraction socials = 36;
    optional ActivityPrivacyType privacy = 37;
    optional FitnessPrivacy fitnessPrivacy = 38;
    optional string clubName = 39;
    optional int64 movingTimeInMs = 40;
    repeated ClubAttribution cas = 41;
}

message Activity { //field names pinned to db
    optional uint64 id = 1;
    required uint64 athleteId = 2;
    required uint64 courseId = 3;
    required string name = 4;
    optional string _f5 = 5;
    optional bool _f6 = 6;
    required string startDate = 7;
    optional string endDate = 8;
    optional float distance = 9; // in meters
    optional float avgHeartRate = 10;
    optional float maxHeartRate = 11;
    optional float avgWatts = 12;
    optional float maxWatts = 13;
    optional float avgCadence = 14;
    optional float maxCadence = 15;
    optional float avgSpeed = 16; // in m/s
    optional float maxSpeed = 17; // in m/s
    optional float calories = 18;
    optional float totalElevation = 19;
    optional uint32 stravaUploadId = 20; //uint64 stored as int32
    optional uint32 stravaActivityId = 21; //uint64 stored as int32
    //optional string _f22 = 22;
    optional uint32 _f23 = 23; //empty; stored as int32; enum up to 5 - ProfileFollowStatus?
    optional bytes fit = 24;
    optional string fitFilename = 25;
    //optional uint64 subgroupId = 26;
    //optional uint64 workoutHash = 27;
    //optional float progressPercentage = 28;
    optional int64 _f29 = 29; //-> Sport sport
    //repeated string act_f30 = 30;
    optional string date = 31;
    /*optional float act_f32 = 32;
    optional string act_f33 = 33;
    optional string act_f34 = 34;
    repeated NotableMoment notables = 35;
    repeated SocialInteraction socials = 36;
    optional ActivityPrivacyType privacy = 37;
    optional FitnessPrivacy fitness_privacy = 38;
    optional string club_name = 39;
    optional int64 moving_time_ms = 40;
    repeated ClubAttribution cas = 41;*/
}

message ActivityList {
    repeated Activity activities = 1;
}

message ActivityListFull {
    repeated ActivityFull activities = 1;
}

enum ActivityPrivacyType {
    PUBLIC = 0;
    PRIVATE = 1;
    FRIENDS = 2;
}

enum Sport {
    CYCLING = 0;
    RUNNING = 1;
    ROWING = 2;
    SPORT3 = 3;
    SPORT4 = 4;
}

enum PlayerType {
    PLAYERTYPE0 = 0;
    NORMAL = 1;
    PRO_CYCLIST = 2;
    ZWIFT_STAFF = 3;
    AMBASSADOR = 4;
    VERIFIED = 5;
    ZED = 6;
    ZAC = 7;
    PRO_TRIATHLETE = 8;
    PRO_RUNNER = 9;
}

enum PowerType {
    VIRTUAL = 0;
    METER = 1;
}

message PlayerProfile {
    optional int64 id = 1;
    optional int64 realm = 2;
    optional string email = 3;
    optional string firstName = 4;
    optional string lastName = 5;
    optional bool male = 6;
    optional string _f7 = 7;
    optional uint32 weight = 9;
    optional uint32 ftp = 10;
    optional uint32 _f11 = 11;
    optional uint32 bodyType = 12;
    optional uint32 hairType = 13;
    optional uint32 facialHairType = 14;
    optional uint32 rideHelmetType = 15;
    optional uint32 glassesType = 16;
    optional uint32 rideShoesType = 17;
    optional uint32 rideSocksType = 18;
    optional uint32 rideGloves = 19;
    optional fixed32 rideJersey = 20;
    optional fixed32 _f21 = 21;
    optional fixed32 bikeWheelFront = 22;
    optional fixed32 bikeWheelRear = 23;
    optional fixed32 bikeFrame = 24;
    optional fixed32 _f25 = 25;
    optional fixed32 _f26 = 26;
    optional fixed64 bikeFrameColour = 27;
    optional fixed64 _f28 = 28;
    optional fixed64 _f29 = 29;
    optional fixed64 _f30 = 30;
    optional fixed64 _f31 = 31;
    optional fixed64 _f32 = 32;
    optional bytes savedGame = 33;
    optional uint32 countryCode = 34;
    optional uint32 totalDistance = 35;
    optional uint32 totalDistanceClimbed = 36;
    optional uint32 totalTimeInMinutes = 37;
    optional uint32 totalInKomJersey = 38;
    optional uint32 totalInSprintersJersey = 39;
    optional uint32 totalInOrangeJersey = 40;
    optional uint32 totalWattHours = 41;
    optional uint32 height = 42;
    optional string dob = 43;
    optional uint32 maxHeartRate = 44;
    optional bool connectedToStrava = 45;
    optional uint32 totalExperiencePoints = 46;
    optional uint32 totalGold = 47;
    optional PlayerType playerType = 48;
    optional uint32 achievementLevel = 49;
    optional bool useMetric = 50;
    optional bool stravaPremium = 51;
    optional PowerType powerSourceModel = 52;
    optional uint32 _f53 = 53;
    optional uint32 _f54 = 54;
    optional uint32 age = 55;
    optional fixed32 _f56 = 56;
    optional uint32 _f57 = 57;
    optional string imageSrcLarge = 58;
    optional fixed64 privacyBits = 59;
    repeated ProfileEntitlement entitlements = 60;

    message SocialFacts {
        optional int64 profileId = 1;
        optional int32 followersCount = 2;
        optional int32 followeesCount = 3;
        optional int32 followeesInCommonWithLoggedInPlayer = 4;
        optional FollowStatus followerStatusOfLoggedInPlayer = 5;
        optional FollowStatus followeeStatusOfLoggedInPlayer = 6;
        optional bool isFavoriteOfLoggedInPlayer = 7;
    }

    optional SocialFacts socialFacts = 61;
    optional FollowStatus followStatus = 62;
    optional bool connectedToTrainingPeaks = 63;
    optional bool connectedToTodaysPlan = 64;

    enum EnrolledProgram {
        ENROLLEDPROGRAM0 = 0;
        ZWIFT_ACADEMY = 1;
        ENROLLEDPROGRAM2 = 2;
        ENROLLEDPROGRAM3 = 3;
        ENROLLEDPROGRAM4 = 4;
    }

    optional EnrolledProgram enrolledProgram = 65;
    optional string todayplanUrl = 66;
    optional uint32 _f67 = 67;
    optional fixed32 runShirtType = 68;
    optional fixed32 runShortsType = 69;
    optional fixed32 runShoesType = 70;
    optional fixed32 runSocksType = 71;
    optional fixed32 runHelmetType = 72;
    optional fixed32 runArmAccessory = 73;
    optional uint32 totalRunDistance = 74;
    optional uint32 totalRunExperiencePoints = 75;
    optional fixed32 _f76 = 76;
    optional fixed32 _f77 = 77;
    optional fixed32 _f78 = 78;
    optional fixed32 _f79 = 79;
    optional uint32 _f80 = 80;
    optional uint32 _f81 = 81;
    optional Subscription subscription = 82;
    optional string mixPanelDistinctId = 83;
    optional uint32 runAchievementLevel = 84;
    optional uint32 totalRunTimeInMinutes = 85;
    optional Sport sport = 86;
    optional uint32 utcOffsetInMinutes = 87;
    optional bool connectedToUnderArmour = 88;
    optional string preferredLanguage = 89;
    optional uint32 hairColour = 90;
    optional uint32 facialHairColour = 91;
    optional uint32 _f92 = 92;
    optional uint32 _f93 = 93;
    optional uint32 runShorts_length = 94;
    optional uint32 _f95 = 95;
    optional uint32 runSocks_length = 96;
    optional uint32 _f97 = 97;
    optional uint32 rideSocks_length = 98;
    optional uint32 _f99 = 99;
    optional uint32 _f100 = 100;
    optional uint32 _f101 = 101;
    optional uint32 _f102 = 102;
    optional uint32 _f103 = 103;
    optional uint32 _f104 = 104;  // avatar setting? Seen 3 and 1
    optional bool connectedToWithings = 105;
    optional bool connectedToFitbit = 106;
    optional string launchedGameClient = 108;
    optional int64 currentActivityId = 109;
    optional bool connectedToGarmin = 110;

    message Reminder {
        optional int64 _f1 = 1;
        optional string _f2 = 2;
        optional int64 _f3 = 3;

        message ReminderProperty {
            optional int64 _f1 = 1;
            optional string _f2 = 2;
            optional string _f3 = 3;
        }

        repeated ReminderProperty _f4 = 4;
    }

    repeated Reminder reminders = 111;
    optional bool _f112 = 112;
    repeated Attribute privateAttributes = 113;
    repeated Attribute publicAttributes = 114;
    optional int32 totalRunCalories = 115;
    optional int64 _f116 = 116;
    optional int32 runTime1miInSeconds = 117;
    optional int32 runTime5kmInSeconds = 118;
    optional int32 runTime10kmInSeconds = 119;
    optional int32 runTimeHalfMarathonInSeconds = 120;
    optional int32 runTimeFullMarathonInSeconds = 121;
    optional int32 _f122 = 122;

    enum CyclingOrganization {
        NO_CYCLING_LICENSE = 0;
        CYCLING_SOUTH_AFRICA = 1;
        CYCLING_AUSTRALIA = 2;
        CYCLING_NEW_ZEALAND = 3;
    }

    optional CyclingOrganization cyclingOrganization = 123;
    optional string _f124 = 124;
    optional ActivityPrivacyType defaultActivityPrivacy = 125;
    optional bool connectedToRuntastic = 126;
    repeated PropertyChange propertyChanges = 127;
}

message PlayerProfiles {
     repeated PlayerProfile profiles = 1;
}

message ProfileEntitlement {
    optional EntitlementType type = 1;

    enum EntitlementType {
        ENTITLEMENTTYPE0 = 0;
        RIDE = 1;
        RUN = 2;
        ROW = 3;
        USE = 4;
    }

    optional int64 _f2 = 2; // always -1 when "RIDE"; increasing small value when "USE" (437, 438, 911, ..., 1229)
    optional ProfileEntitlementStatus status = 3;

    enum ProfileEntitlementStatus {
        ENTITLEMENTSTATUS0 = 0;
        EXPIRED = 1;
        ACTIVE = 2;
        CANCELED = 3;
        INACTIVE = 4;
        APPLIED_AS_SUBSCRIPTION_TRIAL_PERIOD = 5;
    }

    optional string period = 4; // 'P7D' = period of 7 days (Y, M also supported for year and month)
    optional uint32 beginTime = 5; //when period started
    optional uint32 endTime = 6;   //when period ended
    optional uint32 kilometers = 7;      //25 every month
    optional uint32 beginTotalDistance = 8; //where every-month gift started
    optional uint32 endTotalDistance = 9;   //where every-month gift should end
    optional string source = 10; // for example, "strava.premium" ?
    optional Platform platform = 11; // legacy?

    enum Platform {
        OSX = 0;
        PC = 1;
        IOS = 2;
        ANDROID = 3;
        TVOS = 4;
        PLATFORM5 = 5;
        PLATFORM6 = 6;
    }

    optional uint32 renewalDate = 12; //when next 25km gift renewed
    optional bool newTrialSystem = 13; //do not interrupt current track if trial ended
    repeated Platform platforms = 14;
}

enum FollowStatus {
    FOLLOWSTATUS0 = 0;
    UNKNOWN = 1;
    REQUESTS_TO_FOLLOW = 2;
    IS_FOLLOWING = 3;
    IS_BLOCKED = 4;
    NO_RELATIONSHIP = 5;
    SELF = 6;
    HAS_BEEN_DECLINED = 7;
}

message Subscription {
    optional Gateway gateway = 1;

    enum Gateway {
        BRAINTREE = 0;
        APPLE = 1;
    }

    optional SubscriptionStatus status = 2;

    enum SubscriptionStatus {
        NEW = 0;
        EXPIRED = 1;
        ACTIVE = 2;
        CANCELED = 3;
        PAST_DUE = 4;
        PENDING = 5;
        SUBERROR = 6;
        UNRECOGNIZED = 7;
        UNKNOWN = 8;
        ACTIVE_WITH_PAYMENT_FAILURE = 9;
        ABANDONED = 10;
    }
}

message PropertyChange {

    enum Id {
        TYPE0 = 0;
        DATE_OF_BIRTH = 1;
        GENDER = 2;
    }

    required Id property_name = 1;
    optional int32 changeCount = 2;
    optional int32 maxChanges = 3;
}

/*
 *   Attribute ID is crc32 of it's string_value.
 *       e.g. -1575272099="TODAYS_SPORT_SELECT_TYPE"
*/
message Attribute {
    required int32 id = 1;
    optional int64 number_value = 2;
    optional float float_value = 3;
    optional string string_value = 5;
}

message AchievementEntry {
    required int32 id = 1;
}

message Achievements {
    repeated AchievementEntry achievements = 1;
}

message DropInWorld {
    required uint64 id = 1;
    optional string name = 2;
    optional uint64 courseId = 3;
    optional bool _f4 = 4;
    optional uint64 zwifters = 5;
    optional uint64 worldTime = 6;
    optional uint64 realTime = 7;
    repeated DropInPlayer proPlayers = 8;
    repeated DropInPlayer followees = 9;
    repeated DropInPlayer others = 10;
    optional uint64 maxZwifters = 11; //stored as int32
    repeated DropInPlayer pacerBots = 12;
}

message DropInWorldList {
    repeated DropInWorld worlds = 1;
}

message DropInPlayer {
    required uint64 id = 1;
    required string firstName = 2;
    required string lastName = 3;
    optional uint64 distance = 4;
    optional uint64 time = 5;
    optional uint64 countryCode = 6;
    optional PlayerType playerType = 7;
    optional Sport sport = 8;
    optional bool _f9 = 9;
    optional bool _f10 = 10;
    optional uint64 _f11 = 11;
    optional uint64 power = 12;
    optional uint64 _f13 = 13;
    optional float x = 14;
    optional float yAltitude = 15;
    optional float z = 16;
    optional int32 route = 17;
    optional uint32 ridePower = 18;
    optional uint32 speed = 19;
}

message Goal {
    optional uint64 id = 1;
    optional uint64 athleteId = 2;
    optional int64 _f3 = 3;    //-> enum Sport sport
    optional string name = 4; // i.e. "Monthly time goal"
    optional int64 type = 5;  //-> enum GoalType 0=distance, 1=time
    optional int64 periodicity = 6; //-> enum GoalPeriod 0=weekly, 1=monthly
    optional float targetDistance = 7;  //in meters. set to dur for dur goals
    optional float targetDuration = 8;  //in minutes. set to dist for dist goals
    optional float actualDistance = 9;  //in meters. is also set for dur goals?
    optional float actualDuration = 10; //in minutes. is also set for dist goals?
    optional uint64 createdOn = 11;     //in ms since epoch
    optional uint64 periodEndDate = 12;
    optional uint64 _f13 = 13;   //-> enum GoalStatus 0=active, 1=retired
    //optional string _f14 = 14; // timezone? (empty)
}

message Goals {
    repeated Goal goals = 1;
}

message HashSeed {
    required uint32 seed1 = 1;
    required uint32 seed2 = 2;
    required uint64 expiryDate = 3;
}

message HashSeeds {
    repeated HashSeed seeds = 1;
}

message LoginResponse {
    required string sessionState = 1;
    required PerSessionInfo info = 2;
    optional uint32 relaySessionId = 3;
    optional uint32 expiration = 4; // minutes
}

message LoginRequest {
    optional AnalyticsEventProperties properties = 1;
    required bytes aeskey = 2;
}

message AnalyticsEventProperty {
    required string key = 1;
    required string value = 2;
}

message AnalyticsEventProperties {
    repeated AnalyticsEventProperty entries = 2;
}

message RelaySessionRefreshResponse {
    required uint32 relaySessionId = 1;
    required uint32 expiration = 2; // minutes
}


enum ZofflineConstants {
    RealmID = 1;   // hardcoded in ZwiftApp=1 (g_CurrentServerRealmID, 0: never connected; -1: disconnected)
}

enum UserBikeAction {
    ELBOW = 0;
    WAVE = 1;
    UBA_02 = 2; //BikeEntity::UpdateAnimation
    RIDEON = 3;
    HAMMER = 4;
    NICE = 5;
    BRING_IT = 6;
    TOAST = 7;
    BELL = 8;
    HOLIDAY_WAVE = 9; //not sure
}

enum POWERUP_TYPE {
    LIGHTNESS      = 0;
    DRAFTBOOST     = 1;
    BONUS_XP_LIGHT = 2;
    BONUS_XP       = 3;
    UNDRAFTABLE    = 4;
    AERO           = 5;
    NINJA          = 6;
    STEAMROLLER    = 7;
    ANVIL          = 8;
    POWERUP_CNT    = 9;
    POWERUP_NONE   = 15;
}

enum ExpungeReason {
    NOT_EXPUNGED = 0;
    WORLD_FULL = 1;
    ROADS_CLOSED = 2;
}

enum SocialPlayerActionType {
    SOCIAL_ACTION_UNKNOWN_TYPE = 0;
    TEXT_MESSAGE = 1;
    RIDE_ON = 2;
    FLAG = 3;
}

enum FlagType {
    UNKNOWN = 0;
    HARASSMENT = 1;
    FLIER = 2;
    BAD_LANGUAGE = 3;
}

enum MessageGroupType {
    UNKNOWN = 0;
    GLOBAL = 1;
    DIRECT = 2;
    EVENT = 3;
    CLUB = 4;
}

message SocialPlayerAction {
    optional uint64 athleteId = 1;
    optional uint64 toAthleteId = 2; // 0 if public message
    optional SocialPlayerActionType spaType = 3;
    optional string firstName = 4;
    optional string lastName = 5;
    optional string message = 6;
    optional string avatar = 7;
    optional int32 countryCode = 8;
    optional FlagType flagType = 9;
    optional MessageGroupType msgType = 10;
    optional int64 eventSubgroup = 11;
}

enum CompanionToGameCommandType {
    PHONE_TO_GAME_UNKNOWN_COMMAND = 0;
    CHANGE_CAMERA_ANGLE = 1;
    JOIN_ANOTHER_PLAYER = 2;
    TELEPORT_TO_START = 3;
    ELBOW_FLICK = 4;
    WAVE = 5;
    RIDE_ON = 6;
    BELL = 7;
    HAMMER_TIME = 8;
    TOAST = 9;
    NICE = 10;
    BRING_IT = 11;
    DISCARD_ACTIVITY = 12;
    SAVE_ACTIVITY = 13;
    DONE_RIDING = 14;
    CANCEL_DONE_RIDING = 15;
    REQUEST_FOR_PROFILE = 16;
    TAKE_SCREENSHOT = 17;
    OBSOLETE_GROUP_TEXT_MESSAGE = 18;
    OBSOLETE_SINGLE_PLAYER_TEXT_MESSAGE = 19;
    MOBILE_API_VERSION = 20;
    ACTIVATE_POWER_UP = 21;
    CUSTOM_ACTION = 22;
    U_TURN = 23;
    FAN_VIEW = 24;
    SOCIAL_PLAYER_ACTION = 25;
    MOBILE_ALERT_RESPONSE = 26;
    BLEPERIPHERAL_RESPONSE = 27;
    PAIRING_AS = 28;
    PHONE_TO_GAME_PACKET = 29;
    BLEPERIPHERAL_DISCOVERY = 30;
}

message CompanionToGameCommand {
    required int32 seqno = 1;
    required CompanionToGameCommandType command = 2;
    optional int64 subject = 3;
    optional string _f4 = 4;
    optional int64 profileRequestAthleteId = 5;
    optional string _f6 = 6;
    optional int64 _f7 = 7;
    optional int32 _f8 = 8;
    optional uint32 _f9 = 9;
    required uint32 subCommand = 10;
    optional SocialPlayerAction socialAction = 11;
    // no 12
    //optional MobileAlertResponse _f13 = 13;
    // no 14-17
    //optional BLEPeripheralResponse _f18 = 18;
    optional uint64 athleteId = 19;
    optional string _f20 = 20;
    optional bytes gamePacket = 21; // it is a protobuf (usually?) but haven't sus'd it out
    //optional BLEAdvertisement _f22 = 22;
}

message CompanionToGame {
    required uint64 athleteId = 1;
    repeated CompanionToGameCommand commands = 2;
    optional float _a3 = 3; // 0 zero not moving, look to see if delta coords
    optional float _a4 = 4; // 0
    optional float _a5 = 5; // 0
    optional float _b6 = 6; // maybe coords: -0.0314304381608963
    optional float _b7 = 7; // maybe coords: -0.06250044703483582
    optional float _b8 = 8; // maybe coords: -2.5603649616241455
    optional double ts = 9;
    optional int32 seqno = 10;
}

message Position {
    float x = 1;
    float z = 2;
    float y = 3;
}

message PlayerInfo {
    uint64 athleteId = 1;
    int32 _f2 = 2; // seen 1
    Position position = 3;
    string profile = 5;
    uint64 id2XXX = 6; // watching ? XXX
    int32 _f7 = 7; // seen 1
    string fullName = 11;
    int32 _f12XXXPower = 12; // power?
    float _f13 = 13; // seen -0.7938984036445618, -2.536346435546875
    int32 _f16 = 16; // seen u2 or s1, u1, s-1
    int32 _f18 = 18; // seen 0, 24 (for multi athletes)
    double _f19 = 19; // seen 0.9683011423961716
    int32 _f20 = 20; // seen 0
}

message GTPC21_6_1 {
    int32 seqno = 1;
    repeated PlayerInfo playerInfos = 2;
    int32 f3 = 3; // seen u10/s5 with playerinfo
}

message GTPC21_6 {
    repeated GTPC21_6_1 gtpc21_6_1 = 1;
}

message GTPC21_4 {
    int32 f1 = 1;
    string f6 = 6;
    int32 f7 = 7;
    int32 f8 = 8;
}

message GTPC21_8 {
    int32 f1 = 1;
    int32 f2 = 2;
}

message GamePacket {
    int32 f1 = 1; // saw a 6 following a cam change once.
    GTPC21_4 gtpc21_4 = 4;
    GTPC21_6 gtpc21_6 = 6;
    string _f7 = 7;
    GTPC21_8 gtpc21_8 = 8;
}

enum GameToCompanionCommandType {
    UNKNOWN_COMMAND = 0;
    CLEAR_POWER_UP = 1;
    SET_POWER_UP = 2;
    ACTIVATE_POWER_UP = 3;
    CUSTOMIZE_ACTION_BUTTON = 4;
    SEND_IMAGE = 5;
    SOCIAL_PLAYER_ACTION = 6;
    DONT_USE_MOBILE_ALERT = 7;
    BLEPERIPHERAL_REQUEST = 8;
    PAIRING_STATUS = 9;
    MOBILE_ALERT_CANCEL = 10;
    DEFAULT_ACTIVITY_NAME = 11;
    MOBILE_ALERT = 12;
    PACKET = 13;
}

message GameToCompanionCommand {
    int32 seqno = 1;
    GameToCompanionCommandType command = 2;
    int32 f3 = 3;
    int32 f4 = 4;
    int32 f5 = 5;
    int32 f6 = 6;
    int32 f19 = 19; // saw 1 folling pairing_to
    GamePacket gamePacket = 21;
}

message AltPlayerState {
    uint64 athleteId = 1;
    int32 _f2 = 2;
    uint64 _f3XXX_FLAGS = 3;
    int32 _f4 = 4;
    int32 _f5 = 5; // see a lot of 350 or 349 (road loc?) (or zero)
    int32 stat6 = 6; // guessing power, distance, speed (likely power)
    int32 stat7 = 7; // guessing power, distance, speed
    int32 _f8 = 8;
}

message GameToCompanion {
    int32 seqno = 1;
    int32 replySeqno = 2;
    uint64 athleteId = 3;
    int32 _f4 = 4; // possibly bool
    bytes _f5XXXProtobufsometimes = 5;  // massive amount of data
    uint32 _f6 = 6; // possibly bool
    int64 _f7 = 7;
    int64 _f8 = 8;
    repeated AltPlayerState altPlayerStates = 9; // XXX seen once or maybe I messed up here.
    int64 _f10 = 10;
    repeated GameToCompanionCommand commands = 11;
    int64 _worldTimeXXX = 12;  // XXX Pretty sure, might be high prec time, investigate
}

message TcpAddress {
    optional string ip = 1;
    optional int32 port = 2;
    optional int32 realm = 3;
    optional int32 course = 4;
}

message TcpConfig {
    //First server: the TCP telemetry server (34.218.60.145)
    repeated TcpAddress nodes = 1;
}

message PartnersUrls {
    optional string todaysplanUrl = 1;
    optional string trainingpeaksUrl = 2;
}

message PerSessionInfo {
    required string relayUrl = 1;
    optional PartnersUrls apis = 2;
    optional uint64 time = 3;
    optional TcpConfig tcpConfig = 4;
    optional int32 maxSegmentSubs = 5;
}

message ClientToServer {
    optional int64 realm = 1;
    required int64 athleteId = 2;
    optional int64 worldTime = 3;
    required uint32 seqno = 4;
    optional uint32 _f5 = 5;
    optional int64 _f6 = 6;
    optional PlayerState state = 7;
    optional bool _f8 = 8;
    optional bool _f9 = 9;
    optional int64 lastUpdate = 10;
    optional bool _f11 = 11;
    optional int64 lastPlayerUpdate = 12;
    optional int64 largWaTime = 13;
    optional bool _f14 = 14;
    repeated int64 subsSegments = 15;
    repeated int64 unsSegments = 16;
}


message InvitedProfileProto {
    required uint64 athleteId = 1;
    optional string firstName = 2;
    optional string lastName = 3;
    optional string imageSrc = 4;
    optional bool enrolledZwiftAcademy = 5;
    optional bool male = 6;
    optional PlayerType playerType = 7;
}

enum EventInviteStatus {
    PENDING = 0;
    ACCEPTED = 1;
    REJECTED = 2;
}

message EventInviteProto {
    optional InvitedProfileProto profile = 1;
    required EventInviteStatus status = 2;
}

message PrivateEventFeedProto {
    required uint64 eventId = 1; //read in PrivateEventsManagerV2::RegisterPrivateEvent
    optional Sport sport = 2;
    optional uint64 eventSubgroupStart = 3; //IsPrivateEventExpired: return ZNETWORK_GetNetworkSyncedTimeGMT() > a1->m_eventSubgroupStart / 1000uLL + 1800
    optional uint64 routeId = 4;
    optional uint32 durationInSeconds = 5;
    optional float distanceInMeters = 6;
    optional uint64 answeredCount = 7; //stored as int32
    optional uint32 invitedTotalCount = 8;
    optional uint32 acceptedFolloweeCount = 9;
    optional uint32 acceptedTotalCount = 10;
    optional string organizerImageUrl = 11;
    optional uint64 organizerProfileId = 12;
    optional string organizerFirstName = 13;
    optional string organizerLastName = 14;
    optional uint64 updateDate = 15;
    optional uint64 subgroupId = 16;
    optional uint32 laps = 17;
    optional bool rubberbanding = 18; //keep together "rulesId": "1024"
}

message PrivateEventFeedListProto {
    repeated PrivateEventFeedProto pef = 1;
}

message PlayerJoinedEvent {
    required uint64 relId = 1; //subgroup id
    optional uint64 athleteId = 2;
    optional uint64 pje_f3 = 3;
}

message PlayerLeftEvent {
    required uint64 relId = 1; //event id
    optional uint64 athleteId = 2;
    optional uint64 ple_f3 = 3;
}

message EventSubgroupProtobuf { //where is fieldLimit, signedUp, signupStatus, registered, registrationStatus, followeeEntrantCount
//totalEntrantCount, followeeSignedUpCount, totalSignedUpCount, followeeJoinedCount, totalJoinedCount, rulesSet, workoutHash, overrideMapPreferences
//qualificationRuleIds, accessValidationResult
    required uint64 id = 1; // 2395269
    optional string name = 2; // ex: "3R True2 Steady Ride [2.0w/kg avg] (C)"
    optional string description = 3; // ex: "Welcome to our sociable early morning/evening social group ride."
    optional uint32 _f4 = 4; // ""
    optional uint32 _f5 = 5; // 154 and others
    optional uint32 _f6 = 6; // 0
    optional string scode = 7; // ex: "PT3600S"
    optional uint64 rulesId = 8; // 320 and others
    optional uint64 registrationStart = 9;
    optional uint64 registrationStartWT = 10;
    optional uint64 registrationEnd = 11;
    optional uint64 registrationEndWT = 12;
    optional uint64 lineUpStart = 13;
    optional uint64 lineUpStartWT = 14;
    optional uint64 lineUpEnd = 15;
    optional uint64 lineUpEndWT = 16;
    optional uint64 eventSubgroupStart = 17;
    optional uint64 eventSubgroupStartWT = 18;
    optional uint64 _f19 = 19;
    optional uint64 _f20 = 20; //tag416
    optional bool _f21 = 21; // false, tag424
    required uint64 routeId = 22; // 3366225080
    repeated uint64 invitedLeaders = 23; // tag440
    optional float distanceInMeters = 24; // tag453
    optional uint32 laps = 25; // tag456
    // no 26-28
    optional uint64 startLocation = 29; // 13, tag488 [>=6 -> 'bad start location'] valid values: 1..5 (0->1)
    optional uint32 label = 30; // A:1, B:2, C:3, D:4, E:5 etc, tag496
    optional uint32 paceType = 31; // 1 almost everywhere, 2 sometimes; tag504
    optional float fromPaceValue = 32; // tag645
    optional float toPaceValue = 33; // tag653
    optional uint32 durationInSeconds = 34; // Duration of event in seconds, tag656
    optional uint32 _f35 = 35; // tag664
    optional uint64 jerseyHash = 36; // 493134166, tag672
    optional bool _f37 = 37; // 0, tag680
    optional uint32 _f38 = 38; // tag688
    optional string auxiliaryUrl = 39; // "https://cdn.zwift.com/AudioBroadcasts/wbrgrouprideaudiov4", tag698
    optional uint64 bikeHash = 40; // 4208139356, tag704
    repeated uint64 invitedSweepers = 41; // tag712
    optional uint64 _f42 = 42; // tag720
    optional string customUrl = 43; // https://cdn.zwift.com/events/upload/workouts/CafeRide1.zwo, tag730
    optional bool _f44 = 44; // false, tag736
    optional string tags = 45; // tag746, semi-colon delimited tags eg: "fenced;3r;created_ryan;communityevent;no_kick_mode;timestamp=1603911177622"
    optional uint32 lateJoinInMinutes = 46; //tag752
    optional uint64 courseId = 47; // tag760
    optional uint64 _f48 = 48; //tag898
    optional string routeUrl = 49; //tag906
    repeated int32 _f50 = 50; //tag912
    optional bool _f51 = 51; //tag920
}

enum EventVisibility {
    NULL = 0;
    PUB_SHARE = 1;   // event public shareable
    BY_RESOURCE = 2; // event defined by resource
    SHAREABLE = 3;
}

message MicroserviceEventData {
    optional string name = 1;                // "clubs" everywhere (json: microserviceName)
    optional bytes externalResourceId = 2;   // different 16-byte bb4538bfd13346c99a4df2b3cc3b5d95 (json: microserviceExternalResourceId)
    optional EventVisibility visibility = 3; // enum 1 (json: microserviceEventVisibility)
}

message EventSeriesProtobuf { //{"id":4531,"name":"Zwift Academy Triathlon - Baseline TT","description":null,"imported":false}
    optional uint64 id = 1;          //5445 or 1485
    optional string name = 2;        //INEOSVTC or "Fast Friday"
    optional string description = 3; //"" or "Congratulations, you crushed another week of workouts! ..."
}

message EventTimeTrialOptions { //{"timeGapBetweenRowsMs":15000,"maxRows":50,"maxRidersPerRow":10}
    optional uint32 timeGapBetweenRowsMs = 1;  //15000 everywhere
    optional uint32 maxRows = 2;               //50 or 25
    optional uint32 maxRidersPerRow = 3;       //10 everywhere
    optional uint32 _f4 = 4;
    optional uint64 _f5 = 5;
}

enum EventTypeV2 {
    UNKNOWN = 0;
    EFONDO = 1;
    RACE = 2;
    GROUP_RIDE = 3;
    GROUP_WORKOUT = 4;
    TIME_TRIAL = 5;
}

enum EventType {
    UNKNOWN = 0;
    EFONDO = 1;
    RACE = 2;
    GROUP_RIDE = 3;
    GROUP_WORKOUT = 4;
    TIME_TRIAL = 5;
}

enum EventCulling {
    UNDEFINED = 0;
    EVERYBODY = 1;
    EVENT_ONLY = 2;
    SUBGROUP_ONLY = 3;
}

message Event { 
    required uint64 id = 1;
    optional uint64 realm = 2;
    required string name = 3;
    optional string description = 4;
    optional uint64 eventStart = 5; // Start time (epoch time in ms)
    optional string _f6 = 6;
    optional float distanceInMeters = 7;
    optional uint32 laps = 8;
    optional uint32 _f9 = 9;
    repeated EventSubgroupProtobuf category = 10;
    optional string _f11 = 11;
    optional string imageUrl = 12;
    optional uint32 durationInSeconds = 13;
    optional uint64 routeId = 14;
    optional uint64 rulesId = 15;
    optional uint32 _f16 = 16;
    optional bool visible = 17;
    optional uint64 jerseyHash = 18;
    optional string _f19 = 19;
    optional string _f20 = 20;
    optional string _f21 = 21;
    optional Sport sport = 22;
    optional uint64 _f23 = 23;
    optional EventType eventType = 24;
    optional uint64 _f25 = 25;
    optional string _f26 = 26;
    optional uint64 _f27 = 27; //<=4, ENUM? saw = 2
    optional bool overrideMapPreferences = 28;
    optional bool invisibleToNonParticipants = 29;
    optional EventSeriesProtobuf evSeries = 30;
    optional string tags = 31; // semi-colon delimited tags
    optional uint64 _f32 = 32;
    optional bool wtrl = 33; //WTRL (World Tactical Racing Leagues)
    optional uint32 lateJoinInMinutes = 34;
    optional uint64 courseId = 35;
    optional EventTimeTrialOptions tto = 36;
    optional string _f37 = 37;
    optional string _f38 = 38;
    optional uint32 _f39 = 39;
    optional MicroserviceEventData msed = 40;
    repeated uint32 _f41 = 41;
}

message Events {
    repeated Event events = 1;
}

message PrivateEventProto {
    required uint64 id = 1;
    optional Sport sport = 2;
    optional uint64 eventStart = 3;
    optional uint64 routeId = 4;
    optional uint64 startLocation = 5;
    optional uint32 durationInSeconds = 6;
    optional float distanceInMeters = 7;
    optional string description = 8;
    optional uint64 workoutHash = 9; //or laps
    optional uint64 organizerId = 10;
    repeated EventInviteProto eventInvites = 11;
    optional bool showResults = 12;
    optional uint32 laps = 13; //or workoutHash
    optional bool rubberbanding = 14;
}

message LateJoinInformation {
    optional uint64 roadId = 1;
    optional float roadTime = 2;
    optional bool isForward = 3;
    optional uint64 leaderId = 4;
    optional uint32 _f5 = 5; //64 on wire
    optional uint32 _f6 = 6; //64 on wire
    optional uint32 _f7 = 7; //64 on wire
}
